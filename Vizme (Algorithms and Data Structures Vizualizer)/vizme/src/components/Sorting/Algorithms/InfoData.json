{
    "BubbleSort": {
        "ID": "BubbleSort", 
        "Description": "The infamous Bubble Sort. This is the first sorting algorithm (and often one of the first algorithms, period) that many new programmers, data scientists, computer engineers and the like encounter in their early journies. The idea is simple, easy to implement, yet inefficient: compare each element in the array to every other element, swapping whichever is larger over to the right (assuming we are sorting an ascending order). This causes the largest elements in the array to 'bubble up' and shift to the rightmost section of the array after each iteration.",
        "Pseudocode": {
                "JavaScript": "function bubbleSort(arr) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n    }\n  }\n  return arr;\n}                ",
                "CPP": "void bubbleSort(int arr[], int n) {\n  for (int i = 0; i < n-1; i++) {\n    for (int j = 0; j < n-i-1; j++) {\n      if (arr[j] > arr[j+1]) {\n        swap(arr[j], arr[j+1]);\n      }\n    }\n  }\n}                ",
                "Python": "def bubbleSort(arr):\n  n = len(arr)\n  for i in range(n-1):\n    for j in range(n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]"
        },
        "Performance": {
            "AverageCase": {
                "Time": "O(n²)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "WorstCase": {
                "Time": "O(n²)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "BestCase": {
                "Time": "O(n)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 2 },
                    { "x": 3, "y": 3 },
                    { "x": 4, "y": 4 },
                    { "x": 5, "y": 5 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "SelectionSort": {
        "ID": "SelectionSort", 
        "Description": "Selection Sort is another quite simple algorithm. It works by repeatedly cycling through the array, each time 'selecting' the smallest element, and placing it at the beginning of the array. It's even more inefficient than Bubble Sort when you take into consideration the best case scenario, since, no matter what, you will have to cycle through the array N times, where N is the size of the array. This act of repeatedly finding the smallest element is computationally expensive, especially as the size of the array increases. In comparison to more efficient sorting algorithms like Merge Sort or Quick Sort, Selection Sort's quadratic time complexity limits its utility for sorting large or frequently updated datasets. However, its straightforward logic and ease of implementation still make it a valuable teaching tool for understanding sorting algorithms.",
        "Pseudocode": {
            "JavaScript": "function selectionSort(arr) {\n  const n = arr.length;\n  for (let i = 0; i < n-1; i++) {\n    let minIndex = i;\n    for (let j = i+1; j < n; j++) {\n      if (arr[j] < arr[minIndex])\n        minIndex = j;\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n  }\n  return arr;\n}",
            "CPP": "void selectionSort(int arr[], int n) {\n  for (int i = 0; i < n-1; i++) {\n    int minIndex = i;\n    for (int j = i+1; j < n; j++) {\n      if (arr[j] < arr[minIndex])\n        minIndex = j;\n    }\n    swap(arr[i], arr[minIndex]);\n  }\n}",
            "Python": "def selectionSort(arr):\n  n = len(arr)\n  for i in range(n-1):\n    minIndex = i\n    for j in range(i+1, n):\n      if arr[j] < arr[minIndex]:\n        minIndex = j\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]"
        },
        "Performance": {
            "AverageCase": {
                "Time": "O(n²)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "WorstCase": {
                "Time": "O(n²)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "BestCase": {
                "Time": "O(n²)",
                "Space": "O(1)", 
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "InsertionSort": {
        "ID": "InsertionSort", 
        "Description": "Insertion Sort is most likely one of the most used sorting algorithms in the real world. Imagine trying to sort a deck of cards. In one hand, you'll keep your sorted cards (starting with 1 single card), and as you inspect new cards in the unsorted deck, you place them into your sorted hand in it's respective position. Insertion Sort operates the same way, wherein we keep track of a sorted array on the left-hand side, inserting new elements into the sorted array as they come. This algorithm is actually quite efficient for arrays of small sizes (Fewer than 10-20 elements), even faster than Logarithmic functions like Quick Sort.",
        "Pseudocode": {
            "JavaScript": "function insertionSort(arr) {\n  const n = arr.length;\n  for (let i = 1; i < n; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j = j - 1;\n    }\n    arr[j + 1] = key;\n  }\n  return arr;\n}",
            "CPP": "void insertionSort(int arr[], int n) {\n  for (int i = 1; i < n; i++) {\n    int key = arr[i];\n    int j = i - 1;\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j = j - 1;\n    }\n    arr[j + 1] = key;\n  }\n}",
            "Python": "def insertionSort(arr):\n  n = len(arr)\n  for i in range(1, n):\n    key = arr[i]\n    j = i - 1\n    while j >= 0 and arr[j] > key:\n      arr[j + 1] = arr[j]\n      j -= 1\n    arr[j + 1] = key"
        },        
        "Performance": {
            "AverageCase": {
                "Time": "O(n²)",
                "Space": "O(1)", 
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "WorstCase": {
                "Time": "O(n²)",
                "Space": "O(1)", 
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "BestCase": {
                "Time": "O(n)",
                "Space": "O(1)", 
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 2 },
                    { "x": 3, "y": 3 },
                    { "x": 4, "y": 4 },
                    { "x": 5, "y": 5 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "QuickSort": {
        "ID": "QuickSort", 
        "Description": "Quick Sort is an efficient and highly performant Logarithmic sorting algorithm, widely utilized in programming language libraries for its exceptional speed, such as Java's Array.sort(). The algorithm operates by strategically selecting a pivot element from the array and partitioning the data. All elements smaller than the pivot are placed to its left, while those larger are positioned to its right. This pivot + sort procedure is then recursively called on the remaining halves of the array, until the entire array is sorted. One interesting note is that there are varying methods for selecting pivots, such as selecting the first element, last element, or a random element. Often times, selecting a random element as the pivot results in the best performance.",
        "Pseudocode": {
            "JavaScript": "function quickSort(arr, low, high) {\n  if (low < high) {\n    const pi = randomPartition(arr, low, high);\n    quickSort(arr, low, pi - 1);\n    quickSort(arr, pi + 1, high);\n  }\n}\n\nfunction randomPartition(arr, low, high) {\n  const randomIndex = Math.floor(Math.random() * (high - low + 1)) + low;\n  [arr[randomIndex], arr[high]] = [arr[high], arr[randomIndex]];\n  return partition(arr, low, high);\n}\n\nfunction partition(arr, low, high) {\n  const pivot = arr[high];\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    if (arr[j] < pivot) {\n      i++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n  return i + 1;\n}",
            "CPP": "void quickSort(int arr[], int low, int high) {\n  if (low < high) {\n    int pi = randomPartition(arr, low, high);\n    quickSort(arr, low, pi - 1);\n    quickSort(arr, pi + 1, high);\n  }\n}\n\nint randomPartition(int arr[], int low, int high) {\n  int randomIndex = rand() % (high - low + 1) + low;\n  swap(arr[randomIndex], arr[high]);\n  return partition(arr, low, high);\n}\n\nint partition(int arr[], int low, int high) {\n  int pivot = arr[high];\n  int i = low - 1;\n  for (int j = low; j < high; j++) {\n    if (arr[j] < pivot) {\n      i++;\n      swap(arr[i], arr[j]);\n    }\n  }\n  swap(arr[i + 1], arr[high]);\n  return i + 1;\n}",
            "Python": "import random\n\ndef quickSort(arr, low, high):\n  if low < high:\n    pi = randomPartition(arr, low, high)\n    quickSort(arr, low, pi - 1)\n    quickSort(arr, pi + 1, high)\n\n\ndef randomPartition(arr, low, high):\n  randomIndex = random.randint(low, high)\n  arr[randomIndex], arr[high] = arr[high], arr[randomIndex]\n  return partition(arr, low, high)\n\n\ndef partition(arr, low, high):\n  pivot = arr[high]\n  i = low - 1\n  for j in range(low, high):\n    if arr[j] < pivot:\n      i += 1\n      arr[i], arr[j] = arr[j], arr[i]\n  arr[i + 1], arr[high] = arr[high], arr[i + 1]\n  return i + 1"
        },        
        "Performance": {
            "AverageCase": {
                "Time": "O(n log n)",
                "Space": "O(log n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "WorstCase": {
                "Time": "O(n²)",
                "Space": "O(log n)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 4 },
                    { "x": 3, "y": 9 },
                    { "x": 4, "y": 16 },
                    { "x": 5, "y": 25 }
                ]
            },
            "BestCase": {
                "Time": "O(n log n)",
                "Space": "O(log n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "MergeSort": {
        "ID": "MergeSort", 
        "Description": "Merge Sort is the second of our Logarithmic Sorting algorithms, and most likely the most well-known Divide-and-Conquere algorithm. It can be implemented iteratively or recursively, with the recursive methods being more popular. The algorithm recursively divides the given input until we have N subarrays, where N is the size of the initial array. This is our 'divide' step. Then, each subarray is merged and ordered sequentially as the merging process ensues. By the end, we have all of our sorted subarrays merged, to form our sorted array. It's highly efficient, and a joy to visualize as well, as the steps of the Algorithm become apparent as the visualization proceeds. Press 'Sort' to get started :)",
        "Pseudocode": {
            "JavaScript": "function mergeSort(arr) {\n  if (arr.length <= 1) return arr;\n  const mid = Math.floor(arr.length / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n  return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n  let result = [];\n  let i = 0, j = 0;\n  while (i < left.length && j < right.length) {\n    if (left[i] < right[j]) {\n      result.push(left[i]);\n      i++;\n    } else {\n      result.push(right[j]);\n      j++;\n    }\n  }\n  return result.concat(left.slice(i)).concat(right.slice(j));\n}",
            "CPP": "void merge(int arr[], int left, int mid, int right) {\n  int n1 = mid - left + 1;\n  int n2 = right - mid;\n  int L[n1], R[n2];\n  for (int i = 0; i < n1; i++)\n    L[i] = arr[left + i];\n  for (int j = 0; j < n2; j++)\n    R[j] = arr[mid + 1 + j];\n  int i = 0, j = 0, k = left;\n  while (i < n1 && j < n2) {\n    if (L[i] <= R[j]) {\n      arr[k] = L[i];\n      i++;\n    } else {\n      arr[k] = R[j];\n      j++;\n    }\n    k++;\n  }\n  while (i < n1) {\n    arr[k] = L[i];\n    i++;\n    k++;\n  }\n  while (j < n2) {\n    arr[k] = R[j];\n    j++;\n    k++;\n  }\n}\n\nvoid mergeSort(int arr[], int left, int right) {\n  if (left < right) {\n    int mid = left + (right - left) / 2;\n    mergeSort(arr, left, mid);\n    mergeSort(arr, mid + 1, right);\n    merge(arr, left, mid, right);\n  }\n}",
            "Python": "def merge(arr, left, mid, right):\n  n1 = mid - left + 1\n  n2 = right - mid\n  L = [arr[left + i] for i in range(n1)]\n  R = [arr[mid + 1 + j] for j in range(n2)]\n  i = j = 0\n  k = left\n  while i < n1 and j < n2:\n    if L[i] <= R[j]:\n      arr[k] = L[i]\n      i += 1\n    else:\n      arr[k] = R[j]\n      j += 1\n    k += 1\n  while i < n1:\n    arr[k] = L[i]\n    i += 1\n    k += 1\n  while j < n2:\n    arr[k] = R[j]\n    j += 1\n    k += 1\n\ndef mergeSort(arr, left, right):\n  if left < right:\n    mid = (left + right) // 2\n    mergeSort(arr, left, mid)\n    mergeSort(arr, mid + 1, right)\n    merge(arr, left, mid, right)"
        },        
        "Performance": {
            "AverageCase": {
                "Time": "O(n log n)",
                "Space": "O(n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "WorstCase": {
                "Time": "O(n log n)",
                "Space": "O(n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "BestCase": {
                "Time": "O(n log n)",
                "Space": "O(n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "HeapSort": {
        "ID": "HeapSort", 
        "Description": "Heap Sort is the first algorithm many Computer Scientists learn that utilizes a separate data structure to accomplish it's sorting: the Heap. The Heap is (often) a tree-based structure (in our case, we implemented it with an array) that satisfies the Heap property. A Heap is usually implemented as a complete binary tree, where the value of each node is either always greater than or always less than the values of its children, depending on whether it's a Max Heap or a Min Heap. Heaps are primarily used to efficiently implement priority queues, where the highest (or lowest) priority element can be quickly accessed and removed. This is how our Heap Sort method is accomplished. We first form a Heap from the array, and continuously select the top element, insert it into it's respective position, and reform ('Heapify') our Heap.",
        "Pseudocode": {
            "JavaScript": "function heapify(arr, n, i) {\n  let largest = i;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n\n  if (left < n && arr[left] > arr[largest])\n    largest = left;\n\n  if (right < n && arr[right] > arr[largest])\n    largest = right;\n\n  if (largest !== i) {\n    [arr[i], arr[largest]] = [arr[largest], arr[i]];\n    heapify(arr, n, largest);\n  }\n}\n\nfunction heapSort(arr) {\n  const n = arr.length;\n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i);\n  }\n\n  for (let i = n - 1; i > 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(arr, i, 0);\n  }\n\n  return arr;\n}",
            "CPP": "void heapify(int arr[], int n, int i) {\n  int largest = i;\n  int left = 2 * i + 1;\n  int right = 2 * i + 2;\n\n  if (left < n && arr[left] > arr[largest])\n    largest = left;\n\n  if (right < n && arr[right] > arr[largest])\n    largest = right;\n\n  if (largest != i) {\n    swap(arr[i], arr[largest]);\n    heapify(arr, n, largest);\n  }\n}\n\nvoid heapSort(int arr[], int n) {\n  for (int i = n / 2 - 1; i >= 0; i--)\n    heapify(arr, n, i);\n\n  for (int i = n - 1; i > 0; i--) {\n    swap(arr[0], arr[i]);\n    heapify(arr, i, 0);\n  }\n}",
            "Python": "def heapify(arr, n, i):\n  largest = i\n  left = 2 * i + 1\n  right = 2 * i + 2\n\n  if left < n and arr[left] > arr[largest]:\n    largest = left\n\n  if right < n and arr[right] > arr[largest]:\n    largest = right\n\n  if largest != i:\n    arr[i], arr[largest] = arr[largest], arr[i]\n    heapify(arr, n, largest)\n\n\ndef heapSort(arr):\n  n = len(arr)\n\n  for i in range(n // 2 - 1, -1, -1):\n    heapify(arr, n, i)\n\n  for i in range(n - 1, 0, -1):\n    arr[0], arr[i] = arr[i], arr[0]\n    heapify(arr, i, 0)"
        },        
        "Performance": {
            "AverageCase": {
                "Time": "O(n log n)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "WorstCase": {
                "Time": "O(n log n)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "BestCase": {
                "Time": "O(n log n)",
                "Space": "O(1)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "TimSort": {
        "ID": "TimSort", 
        "Description": "When thinking of TimSort, think Insertion Sort + Merge Sort. Named after its creator Tim Peters, this algorithm is designed to optimize sorting performance by taking advantage of inherent patterns and runs of already ordered or partially ordered elements in real-world datasets. TimSort begins by dividing the input array into small chunks, and then uses a modified form of insertion sort to sort these chunks, ensuring efficiency for already sorted or nearly sorted portions. The algorithm then performs a merging step, similar to merge sort, to combine the sorted chunks into larger subarrays while maintaining the sorted order. TimSort employs a clever strategy known as 'galloping' to achieve efficient merging by identifying regions where the data is already sorted, significantly reducing the number of comparisons needed. The galloping approach combined with the hybrid nature of TimSort makes it a robust sorting algorithm, often outperforming traditional sorting methods like Quick Sort and Merge Sort, especially for real-world data sets with varying degrees of sortedness.",
        "Pseudocode": {
            "JavaScript": "const MIN_MERGE = 32;\n\nfunction calculateMinRun(n) {\n  let r = 0;\n  while (n >= MIN_MERGE) {\n    r |= (n & 1);\n    n >>= 1;\n  }\n  return n + r;\n}\n\nfunction insertionSort(arr, left, right) {\n  for (let i = left + 1; i <= right; i++) {\n    let temp = arr[i];\n    let j = i - 1;\n    while (j >= left && arr[j] > temp) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = temp;\n  }\n}\n\nfunction merge(arr, left, mid, right) {\n  const len1 = mid - left + 1;\n  const len2 = right - mid;\n  const leftArr = new Array(len1);\n  const rightArr = new Array(len2);\n\n  for (let i = 0; i < len1; i++)\n    leftArr[i] = arr[left + i];\n  for (let i = 0; i < len2; i++)\n    rightArr[i] = arr[mid + 1 + i];\n\n  let i = 0, j = 0, k = left;\n\n  while (i < len1 && j < len2) {\n    if (leftArr[i] <= rightArr[j]) {\n      arr[k] = leftArr[i];\n      i++;\n    } else {\n      arr[k] = rightArr[j];\n      j++;\n    }\n    k++;\n  }\n\n  while (i < len1) {\n    arr[k] = leftArr[i];\n    i++;\n    k++;\n  }\n\n  while (j < len2) {\n    arr[k] = rightArr[j];\n    j++;\n    k++;\n  }\n}\n\nfunction timSort(arr) {\n  const n = arr.length;\n  const minRun = calculateMinRun(n);\n\n  for (let start = 0; start < n; start += minRun) {\n    const end = Math.min(start + minRun - 1, n - 1);\n    insertionSort(arr, start, end);\n  }\n\n  for (let size = minRun; size < n; size = 2 * size) {\n    for (let left = 0; left < n; left += 2 * size) {\n      const mid = Math.min(n - 1, left + size - 1);\n      const right = Math.min(n - 1, left + 2 * size - 1);\n      merge(arr, left, mid, right);\n    }\n  }\n  return arr;\n}",
            "CPP": "const int MIN_MERGE = 32;\n\nint calculateMinRun(int n) {\n  int r = 0;\n  while (n >= MIN_MERGE) {\n    r |= (n & 1);\n    n >>= 1;\n  }\n  return n + r;\n}\n\nvoid insertionSort(int arr[], int left, int right) {\n  for (int i = left + 1; i <= right; i++) {\n    int temp = arr[i];\n    int j = i - 1;\n    while (j >= left && arr[j] > temp) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = temp;\n  }\n}\n\nvoid merge(int arr[], int left, int mid, int right) {\n  int len1 = mid - left + 1;\n  int len2 = right - mid;\n  int leftArr[len1], rightArr[len2];\n\n  for (int i = 0; i < len1; i++)\n    leftArr[i] = arr[left + i];\n  for (int i = 0; i < len2; i++)\n    rightArr[i] = arr[mid + 1 + i];\n\n  int i = 0, j = 0, k = left;\n\n  while (i < len1 && j < len2) {\n    if (leftArr[i] <= rightArr[j]) {\n      arr[k] = leftArr[i];\n      i++;\n    } else {\n      arr[k] = rightArr[j];\n      j++;\n    }\n    k++;\n  }\n\n  while (i < len1) {\n    arr[k] = leftArr[i];\n    i++;\n    k++;\n  }\n\n  while (j < len2) {\n    arr[k] = rightArr[j];\n    j++;\n    k++;\n  }\n}\n\nvoid timSort(int arr[], int n) {\n  int minRun = calculateMinRun(n);\n\n  for (int start = 0; start < n; start += minRun) {\n    int end = min(start + minRun - 1, n - 1);\n    insertionSort(arr, start, end);\n  }\n\n  for (int size = minRun; size < n; size = 2 * size) {\n    for (int left = 0; left < n; left += 2 * size) {\n      int mid = min(n - 1, left + size - 1);\n      int right = min(n - 1, left + 2 * size - 1);\n      merge(arr, left, mid, right);\n    }\n  }\n}",
            "Python": "Arr[mid + 1 + i] for i in range(len2)]\n\n  i = j = 0\n  k = left\n\n  while i < len1 and j < len2:\n    if leftArr[i] <= rightArr[j]:\n      arr[k] = leftArr[i]\n      i += 1\n    else:\n      arr[k] = rightArr[j]\n      j += 1\n    k += 1\n\n  while i < len1:\n    arr[k] = leftArr[i]\n    i += 1\n    k += 1\n\n  while j < len2:\n    arr[k] = rightArr[j]\n    j += 1\n    k += 1\n\n\ndef timSort(arr):\n  n = len(arr)\n  minRun = calculateMinRun(n)\n\n  for start in range(0, n, minRun):\n    end = min(start + minRun - 1, n - 1)\n    insertionSort(arr, start, end)\n\n  size = minRun\n  while size < n:\n    for left in range(0, n, 2 * size):\n      mid = min(n - 1, left + size - 1)\n      right = min(n - 1, left + 2 * size - 1)\n      merge(arr, left, mid, right)\n    size *= 2\n\n  return arr"
        },
        "Performance": {
            "AverageCase": {
                "Time": "O(n log n)",
                "Space": "O(n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "WorstCase": {
                "Time": "O(n log n)",
                "Space": "O(n)",
                "Data": [
                    { "x": 1, "y": 0 },
                    { "x": 2, "y": 0.602060 },
                    { "x": 3, "y": 1.431364 },
                    { "x": 4, "y": 2.408240 },
                    { "x": 5, "y": 3.494850 }
                ]
            },
            "BestCase": {
                "Time": "O(n)",
                "Space": "O(n)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 2 },
                    { "x": 3, "y": 3 },
                    { "x": 4, "y": 4 },
                    { "x": 5, "y": 5 }
                ]
            }
        },
        "FurtherLearning": ""
    },
    "RadixSort": {
        "ID": "RadixSort", 
        "Description": "Radix Sort is a non-comparative sorting algorithm that operates by distributing elements into buckets based on their individual digits. It processes the digits of the elements from the least significant to the most significant, effectively sorting the elements based on each digit's value. Radix Sort is particularly efficient for sorting integers or strings of the same length, making it a suitable choice for specific data type. Each pass involves distributing the elements into buckets according to the digit being considered, and then collecting them back in the order of the buckets. This process is repeated until all digits have been processed, resulting in a fully sorted array. Radix Sort's time complexity is influenced by the number of digits or characters in the elements being sorted and the range of digits. It often achieves a linear time complexity for integer data types, making it a powerful sorting technique for particular use cases.",
        "Pseudocode": {
            "JavaScript": "function getMax(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\nfunction countSort(arr, exp) {\n  const output = new Array(arr.length).fill(0);\n  const count = new Array(10).fill(0);\n\n  for (let i = 0; i < arr.length; i++) {\n    count[Math.floor(arr[i] / exp) % 10]++;\n  }\n\n  for (let i = 1; i < 10; i++) {\n    count[i] += count[i - 1];\n  }\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    output[count[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];\n    count[Math.floor(arr[i] / exp) % 10]--;\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = output[i];\n  }\n}\n\nfunction radixSort(arr) {\n  const max = getMax(arr);\n  for (let exp = 1; Math.floor(max / exp) > 0; exp *= 10) {\n    countSort(arr, exp);\n  }\n  return arr;\n}",
            "CPP": "void countSort(int arr[], int n, int exp) {\n  int output[n];\n  int count[10] = {0};\n\n  for (int i = 0; i < n; i++)\n    count[(arr[i] / exp) % 10]++;\n\n  for (int i = 1; i < 10; i++)\n    count[i] += count[i - 1];\n\n  for (int i = n - 1; i >= 0; i--) {\n    output[count[(arr[i] / exp) % 10] - 1] = arr[i];\n    count[(arr[i] / exp) % 10]--;\n  }\n\n  for (int i = 0; i < n; i++)\n    arr[i] = output[i];\n}\n\nint getMax(int arr[], int n) {\n  int max = arr[0];\n  for (int i = 1; i < n; i++)\n    if (arr[i] > max)\n      max = arr[i];\n  return max;\n}\n\nvoid radixSort(int arr[], int n) {\n  int max = getMax(arr, n);\n\n  for (int exp = 1; max / exp > 0; exp *= 10)\n    countSort(arr, n, exp);\n}",
            "Python": "def countingSort(arr, exp):\n  n = len(arr)\n  output = [0] * n\n  count = [0] * 10\n\n  for i in range(n):\n    index = arr[i] // exp % 10\n    count[index] += 1\n\n  for i in range(1, 10):\n    count[i] += count[i - 1]\n\n  i = n - 1\n  while i >= 0:\n    index = arr[i] // exp % 10\n    output[count[index] - 1] = arr[i]\n    count[index] -= 1\n    i -= 1\n\n  for i in range(n):\n    arr[i] = output[i]\n\n\ndef radixSort(arr):\n  max_num = max(arr)\n  exp = 1\n\n  while max_num // exp > 0:\n    countingSort(arr, exp)\n    exp *= 10\n\n  return arr"
        },
        "Performance": {
            "AverageCase": {
                "Time": "O(nk)",
                "Space": "O(n + k)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 2 },
                    { "x": 3, "y": 3 },
                    { "x": 4, "y": 4 },
                    { "x": 5, "y": 5 }
                ]
            },
            "WorstCase": {
                "Time": "O(nk)",
                "Space": "O(n + k)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 2 },
                    { "x": 3, "y": 3 },
                    { "x": 4, "y": 4 },
                    { "x": 5, "y": 5 }
                ]
            },
            "BestCase": {
                "Time": "O(nk)",
                "Space": "O(n + k)",
                "Data": [
                    { "x": 1, "y": 1 },
                    { "x": 2, "y": 2 },
                    { "x": 3, "y": 3 },
                    { "x": 4, "y": 4 },
                    { "x": 5, "y": 5 }
                ]
            }
        },
        "FurtherLearning": ""
    }
}
